Перем Настройки;
Перем Дескриптор Экспорт;
Перем Версия;
Перем Среда;
Перем ЛогФайл;
Перем дбг;

Процедура УстановитьЗапретФоновыхЗаданий() Экспорт
	ДописатьВЛогФайл("*** Начало выполнения под "+Среда["USERNAME"]+"@"+Среда["USERDOMAIN"], 1);
	Дескриптор = ДескрипторУправленияСеансамиБазы();


	Для Каждого ИБ Из Дескриптор.ConnectToWorkProcess.GetInfoBases() Цикл
	ДописатьВЛогФайл("Обрабатывается ИБ "+ИБ.DBName, 4);
		Если Не ИБ.ScheduledJobsDenied Тогда
			ДописатьВЛогФайл("Устанавливается флаг запрета ФЗ на ИБ "+ИБ.DBName, 1);
			ИБ.ScheduledJobsDenied = Истина;
			Попытка
				Дескриптор.ConnectToWorkProcess.UpdateInfoBase(ИБ);
			Исключение
				Ошибка = ИнформацияОбОшибке();
				ДописатьВЛогФайл("Не удалось установить флаг запрета ФЗ на ИБ ["+ИБ.DBName+"]: " + ПолучитьПолноеОписаниеОшибки(Ошибка)+"
				|"+ОписаниеОшибки(), 0);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ДописатьВЛогФайл("*** Нормальное завершение", 1);
КонецПроцедуры

Процедура ДописатьВЛогФайл(СтрокаВЛогФайл, Уровень) Экспорт
	Если ПустаяСтрока(СтрокаВЛогФайл) Тогда
		Возврат;
	КонецЕсли;
	Рапорт 	= Строка(ТекущаяДата()) +" ["+Уровень+"]"+ Символы.Таб + СтрокаВЛогФайл;

	Сообщить(Рапорт);

Если ЛогФайл = Неопределено Тогда
  Если Не ПустаяСтрока(Настройки.ПутьКФайлуПротокола) Тогда
    ЛогФайл = Новый Файл(Настройки.ПутьКФайлуПротокола);
    КаталогЛФ = Новый Файл(ЛогФайл.Путь);
    Если Не (КаталогЛФ.Существует() И КаталогЛФ.ЭтоКаталог()) Тогда
      Сообщить("Неверно указан путь к файлу протокола");
      Возврат;
    Иначе
    КонецЕсли;
  КонецЕсли;
КонецЕсли;

Если дбг >= Уровень Тогда

	Протокол = Новый ЗаписьТекста(Настройки.ПутьКФайлуПротокола, "utf-8",, Истина);
	Протокол.ЗаписатьСтроку(Рапорт);
	Протокол.Закрыть();
КонецЕсли;

КонецПроцедуры

Функция   ПолучитьПолноеОписаниеОшибки(Ош)
	ТекстОшибки="";
	Пока Ош <> Неопределено Цикл
		Если Ош.Причина <> Неопределено Тогда
			ТекстОшибки = ТекстОшибки +" // "+ Ош.Причина.Описание;
		КонецЕсли;
		Ош = Ош.Причина;
	КонецЦикла;
	Возврат ТекстОшибки;
КонецФункции

Функция   ПолучитьСоединениеСКластером()

	Соединение = Настройки.ВерсияСОМконнектора;
	ДописатьВЛогФайл("Создание COM-коннектора <"+ Соединение + ">", 3);

	Возврат Новый COMОбъект(Соединение);

КонецФункции

Функция   ДескрипторУправленияСеансамиБазы() Экспорт

	Перем ComConnector;
	Перем ServerAgent;
	Перем Clusters;

	Дескриптор = Новый Структура;
	Дескриптор.Вставить("ServerAgent", Неопределено);
	Дескриптор.Вставить("Cluster", Неопределено);
	Дескриптор.Вставить("ConnectToWorkProcess", Неопределено);
	Дескриптор.Вставить("InfoBase", Неопределено);

	АдресАгента = Настройки.АдресСервераЦентральногоСервераКластера + ":" + Настройки.ТСППортАгентаКластера;
	ИмяСервера = Настройки.АдресСервераЦентральногоСервераКластера + ":" + Настройки.ТСППортМенеджераКластера;
	ComConnector = ПолучитьСоединениеСКластером();

	Попытка

		ДописатьВЛогФайл("Подключение к агенту сервера "+АдресАгента, 3);
		ServerAgent = ComConnector.ConnectAgent(АдресАгента);
		Дескриптор.ServerAgent = ServerAgent;

		ДописатьВЛогФайл("Получение массива кластеров сервера у агента сервера", 3);
		Clusters = ServerAgent.GetClusters();

		Cluster = НайтиКластерСерверов(Clusters, ИмяСервера);
		ДописатьВЛогФайл("Аутентикация к найденному кластеру: " + Cluster.HostName + ":" + Cluster.MainPort, 3);
		ServerAgent.Authenticate(Cluster,  Настройки.АдминистраторКластера, Настройки.ПарольАдминистратораКластера);

		Дескриптор.Cluster = Cluster;
		Дескриптор.ConnectToWorkProcess = ПолучитьСоединениеСПроцессом(ComConnector, ServerAgent, Cluster);
		Если Дескриптор.ConnectToWorkProcess <> Неопределено Тогда

			//InfoBase = НайтиИнформационнуюБазуВРабочемПроцессе(Дескриптор.ConnectToWorkProcess);
			//Если Infobase = Неопределено Тогда
			//	ВызватьИсключение "Не нашли нужную ИБ";
			//КонецЕсли;
			//
			//Дескриптор.InfoBase = InfoBase;

		Иначе
			ВызватьИсключение "Нет запущенных рабочих процессов";
		КонецЕсли;

	Исключение
		Инфо = ИнформацияОбОшибке();
		ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);

		ЗакрытьДескриптор();
		ОсвободитьОбъектКластера(Clusters);
		ОсвободитьОбъектКластера(ComConnector);

		ВызватьИсключение;

	КонецПопытки;

	Возврат Дескриптор;

КонецФункции

Процедура ОсвободитьОбъектКластера(Соединение)

	Если Соединение <> Неопределено Тогда
		ОсвободитьОбъект(Соединение);
		Соединение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ЗакрытьДескриптор() Экспорт

	ОсвободитьОбъектКластера(Дескриптор.ConnectToWorkProcess);
	ОсвободитьОбъектКластера(Дескриптор.Cluster);
	ОсвободитьОбъектКластера(Дескриптор.ServerAgent);
	ОсвободитьОбъектКластера(Дескриптор.InfoBase);

КонецПроцедуры

Функция   НайтиКластерСерверов(Знач Clusters, Знач ИмяСервера)

	НашлиКластер = Ложь;
	i = 0;
	Пока i < Clusters.count() Цикл
//		Cluster = Clusters.GetValue(i);
		Cluster = Clusters[i];
		i=i+1;
		Если ВРег(Cluster.HostName) + ":" + СтрЗаменить(Cluster.MainPort, Символы.НПП, "") = ВРег(ИмяСервера) Тогда
			НашлиКластер = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не НашлиКластер Тогда
		ОсвободитьОбъектКластера(Cluster);
		ВызватьИсключение "Ошибка - не нашли кластер <"+ИмяСервера+">";
	КонецЕсли;

	Возврат Cluster;

КонецФункции

Функция   ПолучитьСоединениеСПроцессом(Знач ComConnector, Знач ServerAgent, Знач Cluster)

	Перем СоединениеСПроцессом;

	Попытка

		ДописатьВЛогФайл("Получение списка работающих рабочих процессов и обход в цикле", 3);

		WorkingProcesses = ServerAgent.GetWorkingProcesses(Cluster);
		j = 0;
		Пока j < WorkingProcesses.count() Цикл
//			wp = WorkingProcesses.GetValue(j);
			wp = WorkingProcesses[j];
			j = j+1;
			Если wp.Running = 1 Тогда

				СтрокаСоединения = "tcp://" + wp.HostName + ":" + СтрЗаменить(wp.MainPort, Символы.НПП, "");
				ДописатьВЛогФайл("Создание соединения с рабочим процессом " + СтрокаСоединения, 3);
				Попытка
					ConnectToWorkProcess = ComConnector.ConnectWorkingProcess(СтрокаСоединения);
				Исключение
					Инфо = ИнформацияОбОшибке();
					ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
					Продолжить;
				КонецПопытки;
				ДописатьВЛогФайл("Авторизация в кластере: <"+Настройки.АдминистраторКластера+">", 3);
				Попытка
					ConnectToWorkProcess.AuthenticateAdmin(""+Настройки.АдминистраторКластера, ""+Настройки.ПарольАдминистратораКластера);
				Исключение
					Инфо = ИнформацияОбОшибке();
					ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
					Продолжить;
				КонецПопытки;
				ДописатьВЛогФайл("Авторизация в ИБ: <"+Настройки.АдинистраторИнформационнойБазы+">", 3);
				Попытка
					ConnectToWorkProcess.AddAuthentication(""+Настройки.АдинистраторИнформационнойБазы, ""+Настройки.ПарольАдинистратораИБ);
				Исключение
					Инфо = ИнформацияОбОшибке();
					ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
					Продолжить;
				КонецПопытки;

				СоединениеСПроцессом = ConnectToWorkProcess;
				Прервать;

			КонецЕсли;

		КонецЦикла;

	Исключение

		ОсвободитьОбъектКластера(ConnectToWorkProcess);
		ОсвободитьОбъектКластера(WorkingProcesses);

		ВызватьИсключение;

	КонецПопытки;

	ОсвободитьОбъектКластера(WorkingProcesses);

	Возврат СоединениеСПроцессом;

КонецФункции

Процедура ПроверитьТекущегоПользователя()
  LegalUserList = "tasker, goblin";

  Если Найти(ВРег(LegalUserList), ВРег(Среда["USERNAME"])) = 0 Тогда
    ДописатьВЛогФайл("Скрипт нужно запускать из-под пользователей "+LegalUserList+". Запущен из-под "+Среда["USERNAME"]+"@"+Среда["USERDOMAIN"], 0);
    Exit(15);
  КонецЕсли;
  СтрокаПустыхПараметров = "";

  Для каждого Настр Из Настройки Цикл
    Если ПустаяСтрока(Настр.Значение) Тогда
      СтрокаПустыхПараметров = СтрокаПустыхПараметров + ", "+Настр.Ключ;
    КонецЕсли;
  КонецЦикла;

  Если Не ПустаяСтрока(СтрокаПустыхПараметров) Тогда
    ДописатьВЛогФайл("Для работы скрипта не хватает настроек: " + Сред(СтрокаПустыхПараметров, 2), 0);
    Exit(24);
  КонецЕсли;

КонецПроцедуры

Процедура УстановитьНастройки()
	Настройки = Новый Структура;
	//{
	Настройки.Вставить("АдресСервераЦентральногоСервераКластера", Среда["C1.clstrTST"]);
	Настройки.Вставить("ТСППортАгентаКластера", "1540");
	Настройки.Вставить("ТСППортМенеджераКластера", "1541");
	Настройки.Вставить("ВерсияСОМконнектора", Среда["C1.com1cModel"]);
	Настройки.Вставить("АдминистраторКластера", Среда["C1.clstAdmin"]);
	Настройки.Вставить("ПарольАдминистратораКластера", Среда["C1.clstPasswd"]);
	Настройки.Вставить("АдинистраторИнформационнойБазы", Среда["C1.IBadmin"]);
	Настройки.Вставить("ПарольАдинистратораИБ", Среда["C1.IBpasswd"]);
	Настройки.Вставить("ПутьКФайлуПротокола", "c:/1c/cmd/log/FZdenying.log");
	//}
КонецПроцедуры
// **************************************************************************** //

Версия = "6.4.26";
Скрипт = Новый Файл(ТекущийСценарий().Источник);
СИ = Новый SystemInfo;
Среда = СИ.EnvironmentVariables();
дбг = 2;

Сообщить("1Scr вер. "+СИ.Версия+"  -----[  "+Скрипт.ИмяБезРасширения+"  ]-----  вер. "+Версия+" 2016@VSCraft"+Символы.ПС+Символы.ПС);
Сообщить("скрипт устанавливает флаг запрета фоновых заданий ScheduledJobsDenied на все");
Сообщить("информационные базы указанного в настройках кластера"+Символы.ПС+Символы.ПС);

УстановитьНастройки();
ПроверитьТекущегоПользователя();
УстановитьЗапретФоновыхЗаданий();
